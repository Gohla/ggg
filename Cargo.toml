cargo-features = ["named-profiles", "profile-overrides"]

[workspace]
members = [
  "core/*",
  "graphics",
  "graphics/voxel_meshing"
]
default-members = [
  "graphics",
  "graphics/voxel_meshing"
]
resolver = "2"


# Development profile: no debug information, some optimisations. Very low compile-time.
[profile.dev]
opt-level = 2
debug = false
debug-assertions = true
overflow-checks = true
lto = false
panic = "abort"
incremental = true
# Optimize all dependencies, but not our own crates, to speed up runtime.
[profile.dev.package."*"]
opt-level = 3
debug = false
overflow-checks = true
debug-assertions = true
incremental = true

# Testing: same as development profile. Very low compile-time.
[profile.test]
inherits = "dev"


# Debug profile: full debug information, no optimisations. Low compile-time.
[profile.dbg]
inherits = "dev"
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
lto = false
panic = "abort"
incremental = true
# Optimize all dependencies, but not our own crates, to speed up runtime.
[profile.dbg.package."*"]
opt-level = 3
debug = true
overflow-checks = true
debug-assertions = true
incremental = true


# Release profile: full optimisations, including full LTO. High compile-time.
[profile.release]
opt-level = 3
debug = false
overflow-checks = false
debug-assertions = false
lto = true
panic = "abort"

# Fast iteration release profile: full optimisations, but without LTO. Medium compile-time.
[profile.fastrelease]
inherits = "release"
incremental = true
codegen-units = 256
lto = false


# Benchmarking profile = release. High compile-time.
[profile.bench]
inherits = "release"

# Fast iteration benchmarking profile = fastrelease. Medium compile-time
[profile.fastbench]
inherits = "fastrelease"


# Performance profiling profile = release + debug. High compile-time.
[profile.profile]
inherits = "release"
debug = true

# Fast iteration performance profiling profile = fastrelease + debug. Medium compile-time
[profile.fastprofile]
inherits = "fastrelease"
debug = true
